




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace MSBS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool OnLoginResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int num, String id, String nick, int rank, int money, int cash, int weapon, int skin, int game, String message);  
		public OnLoginResultDelegate OnLoginResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int num, String id, String nick, int rank, int money, int cash, int weapon, int skin, int game, String message)
		{ 
			return false;
		};
		public delegate bool OnRegisterResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String message);  
		public OnRegisterResultDelegate OnRegisterResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String message)
		{ 
			return false;
		};
		public delegate bool OnStatusResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int num, String id, String nick, int rank, int money, int cash, int weapon, int skin, int game, String message);  
		public OnStatusResultDelegate OnStatusResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int num, String id, String nick, int rank, int money, int cash, int weapon, int skin, int game, String message)
		{ 
			return false;
		};
		public delegate bool OnSoloMatchedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, String message);  
		public OnSoloMatchedDelegate OnSoloMatched = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, String message)
		{ 
			return false;
		};
		public delegate bool OnTeamMatchedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, String message);  
		public OnTeamMatchedDelegate OnTeamMatched = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, String message)
		{ 
			return false;
		};
		public delegate bool OnGameInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, int mode, String users);  
		public OnGameInfoDelegate OnGameInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, int room, int mode, String users)
		{ 
			return false;
		};
		public delegate bool OnGameStatusCountdownDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int count);  
		public OnGameStatusCountdownDelegate OnGameStatusCountdown = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int count)
		{ 
			return false;
		};
		public delegate bool OnGameStatusTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time);  
		public OnGameStatusTimeDelegate OnGameStatusTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time)
		{ 
			return false;
		};
		public delegate bool OnGameStatusReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusReadyDelegate OnGameStatusReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusScoreDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int blueKill, int blueDeath, int bluePoint, int redKill, int redDeath, int redPoint);  
		public OnGameStatusScoreDelegate OnGameStatusScore = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int blueKill, int blueDeath, int bluePoint, int redKill, int redDeath, int redPoint)
		{ 
			return false;
		};
		public delegate bool OnGameStatusMessageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int type, String message);  
		public OnGameStatusMessageDelegate OnGameStatusMessage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int type, String message)
		{ 
			return false;
		};
		public delegate bool OnGameEventHealthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int health);  
		public OnGameEventHealthDelegate OnGameEventHealth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int health)
		{ 
			return false;
		};
		public delegate bool OnGameEventDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int from, int to, int amount, String option);  
		public OnGameEventDamageDelegate OnGameEventDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int from, int to, int amount, String option)
		{ 
			return false;
		};
		public delegate bool OnGameEventObjectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int health);  
		public OnGameEventObjectDelegate OnGameEventObject = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int health)
		{ 
			return false;
		};
		public delegate bool OnGameEventItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int type, int num, int action);  
		public OnGameEventItemDelegate OnGameEventItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int type, int num, int action)
		{ 
			return false;
		};
		public delegate bool OnGameEventKillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int from, int to, String option);  
		public OnGameEventKillDelegate OnGameEventKill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int from, int to, String option)
		{ 
			return false;
		};
		public delegate bool OnGameEventRespawnDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int time);  
		public OnGameEventRespawnDelegate OnGameEventRespawn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int num, int time)
		{ 
			return false;
		};
		public delegate bool OnGameResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameResultDelegate OnGameResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameUserMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameUserMoveDelegate OnGameUserMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameUserSyncDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameUserSyncDelegate OnGameUserSync = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.OnLoginResult:
            ProcessReceivedMessage_OnLoginResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnRegisterResult:
            ProcessReceivedMessage_OnRegisterResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnStatusResult:
            ProcessReceivedMessage_OnStatusResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnSoloMatched:
            ProcessReceivedMessage_OnSoloMatched(__msg, pa, hostTag, remote);
            break;
        case Common.OnTeamMatched:
            ProcessReceivedMessage_OnTeamMatched(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameInfo:
            ProcessReceivedMessage_OnGameInfo(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusCountdown:
            ProcessReceivedMessage_OnGameStatusCountdown(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusTime:
            ProcessReceivedMessage_OnGameStatusTime(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusReady:
            ProcessReceivedMessage_OnGameStatusReady(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusScore:
            ProcessReceivedMessage_OnGameStatusScore(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusMessage:
            ProcessReceivedMessage_OnGameStatusMessage(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventHealth:
            ProcessReceivedMessage_OnGameEventHealth(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventDamage:
            ProcessReceivedMessage_OnGameEventDamage(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventObject:
            ProcessReceivedMessage_OnGameEventObject(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventItem:
            ProcessReceivedMessage_OnGameEventItem(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventKill:
            ProcessReceivedMessage_OnGameEventKill(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventRespawn:
            ProcessReceivedMessage_OnGameEventRespawn(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameResult:
            ProcessReceivedMessage_OnGameResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserMove:
            ProcessReceivedMessage_OnGameUserMove(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserSync:
            ProcessReceivedMessage_OnGameUserSync(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_OnLoginResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
String nick; Nettention.Proud.Marshaler.Read(__msg,out nick);	
int rank; Nettention.Proud.Marshaler.Read(__msg,out rank);	
int money; Nettention.Proud.Marshaler.Read(__msg,out money);	
int cash; Nettention.Proud.Marshaler.Read(__msg,out cash);	
int weapon; Nettention.Proud.Marshaler.Read(__msg,out weapon);	
int skin; Nettention.Proud.Marshaler.Read(__msg,out skin);	
int game; Nettention.Proud.Marshaler.Read(__msg,out game);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnLoginResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=num.ToString()+",";
parameterString+=id.ToString()+",";
parameterString+=nick.ToString()+",";
parameterString+=rank.ToString()+",";
parameterString+=money.ToString()+",";
parameterString+=cash.ToString()+",";
parameterString+=weapon.ToString()+",";
parameterString+=skin.ToString()+",";
parameterString+=game.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnLoginResult, RmiName_OnLoginResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnLoginResult;
        summary.rmiName = RmiName_OnLoginResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnLoginResult (remote,ctx , result, num, id, nick, rank, money, cash, weapon, skin, game, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnLoginResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnLoginResult;
        summary.rmiName = RmiName_OnLoginResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnRegisterResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnRegisterResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnRegisterResult, RmiName_OnRegisterResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnRegisterResult;
        summary.rmiName = RmiName_OnRegisterResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnRegisterResult (remote,ctx , result, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnRegisterResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnRegisterResult;
        summary.rmiName = RmiName_OnRegisterResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnStatusResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
String nick; Nettention.Proud.Marshaler.Read(__msg,out nick);	
int rank; Nettention.Proud.Marshaler.Read(__msg,out rank);	
int money; Nettention.Proud.Marshaler.Read(__msg,out money);	
int cash; Nettention.Proud.Marshaler.Read(__msg,out cash);	
int weapon; Nettention.Proud.Marshaler.Read(__msg,out weapon);	
int skin; Nettention.Proud.Marshaler.Read(__msg,out skin);	
int game; Nettention.Proud.Marshaler.Read(__msg,out game);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnStatusResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=num.ToString()+",";
parameterString+=id.ToString()+",";
parameterString+=nick.ToString()+",";
parameterString+=rank.ToString()+",";
parameterString+=money.ToString()+",";
parameterString+=cash.ToString()+",";
parameterString+=weapon.ToString()+",";
parameterString+=skin.ToString()+",";
parameterString+=game.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnStatusResult, RmiName_OnStatusResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnStatusResult;
        summary.rmiName = RmiName_OnStatusResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnStatusResult (remote,ctx , result, num, id, nick, rank, money, cash, weapon, skin, game, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnStatusResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnStatusResult;
        summary.rmiName = RmiName_OnStatusResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnSoloMatched(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnSoloMatched);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=room.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnSoloMatched, RmiName_OnSoloMatched,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnSoloMatched;
        summary.rmiName = RmiName_OnSoloMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnSoloMatched (remote,ctx , result, room, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnSoloMatched);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnSoloMatched;
        summary.rmiName = RmiName_OnSoloMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTeamMatched(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnTeamMatched);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=room.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnTeamMatched, RmiName_OnTeamMatched,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTeamMatched;
        summary.rmiName = RmiName_OnTeamMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTeamMatched (remote,ctx , result, room, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTeamMatched);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTeamMatched;
        summary.rmiName = RmiName_OnTeamMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Nettention.Proud.Marshaler.Read(__msg,out result);	
int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
int mode; Nettention.Proud.Marshaler.Read(__msg,out mode);	
String users; Nettention.Proud.Marshaler.Read(__msg,out users);	
core.PostCheckReadMessage(__msg, RmiName_OnGameInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
parameterString+=room.ToString()+",";
parameterString+=mode.ToString()+",";
parameterString+=users.ToString()+",";
        NotifyCallFromStub(Common.OnGameInfo, RmiName_OnGameInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameInfo;
        summary.rmiName = RmiName_OnGameInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameInfo (remote,ctx , result, room, mode, users );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameInfo;
        summary.rmiName = RmiName_OnGameInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusCountdown(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int count; Nettention.Proud.Marshaler.Read(__msg,out count);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusCountdown);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=count.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusCountdown, RmiName_OnGameStatusCountdown,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusCountdown;
        summary.rmiName = RmiName_OnGameStatusCountdown;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusCountdown (remote,ctx , count );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusCountdown);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusCountdown;
        summary.rmiName = RmiName_OnGameStatusCountdown;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusTime(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int time; Nettention.Proud.Marshaler.Read(__msg,out time);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusTime);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=time.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusTime, RmiName_OnGameStatusTime,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusTime;
        summary.rmiName = RmiName_OnGameStatusTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusTime (remote,ctx , time );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusTime);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusTime;
        summary.rmiName = RmiName_OnGameStatusTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusReady);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusReady, RmiName_OnGameStatusReady,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusReady;
        summary.rmiName = RmiName_OnGameStatusReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusReady (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusReady);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusReady;
        summary.rmiName = RmiName_OnGameStatusReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusScore(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int blueKill; Nettention.Proud.Marshaler.Read(__msg,out blueKill);	
int blueDeath; Nettention.Proud.Marshaler.Read(__msg,out blueDeath);	
int bluePoint; Nettention.Proud.Marshaler.Read(__msg,out bluePoint);	
int redKill; Nettention.Proud.Marshaler.Read(__msg,out redKill);	
int redDeath; Nettention.Proud.Marshaler.Read(__msg,out redDeath);	
int redPoint; Nettention.Proud.Marshaler.Read(__msg,out redPoint);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusScore);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=blueKill.ToString()+",";
parameterString+=blueDeath.ToString()+",";
parameterString+=bluePoint.ToString()+",";
parameterString+=redKill.ToString()+",";
parameterString+=redDeath.ToString()+",";
parameterString+=redPoint.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusScore, RmiName_OnGameStatusScore,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusScore;
        summary.rmiName = RmiName_OnGameStatusScore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusScore (remote,ctx , blueKill, blueDeath, bluePoint, redKill, redDeath, redPoint );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusScore);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusScore;
        summary.rmiName = RmiName_OnGameStatusScore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusMessage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int type; Nettention.Proud.Marshaler.Read(__msg,out type);	
String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusMessage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=type.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusMessage, RmiName_OnGameStatusMessage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusMessage;
        summary.rmiName = RmiName_OnGameStatusMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusMessage (remote,ctx , type, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusMessage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusMessage;
        summary.rmiName = RmiName_OnGameStatusMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventHealth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int health; Nettention.Proud.Marshaler.Read(__msg,out health);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventHealth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=num.ToString()+",";
parameterString+=health.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventHealth, RmiName_OnGameEventHealth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventHealth;
        summary.rmiName = RmiName_OnGameEventHealth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventHealth (remote,ctx , num, health );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventHealth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventHealth;
        summary.rmiName = RmiName_OnGameEventHealth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventDamage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int from; Nettention.Proud.Marshaler.Read(__msg,out from);	
int to; Nettention.Proud.Marshaler.Read(__msg,out to);	
int amount; Nettention.Proud.Marshaler.Read(__msg,out amount);	
String option; Nettention.Proud.Marshaler.Read(__msg,out option);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventDamage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=from.ToString()+",";
parameterString+=to.ToString()+",";
parameterString+=amount.ToString()+",";
parameterString+=option.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventDamage, RmiName_OnGameEventDamage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventDamage;
        summary.rmiName = RmiName_OnGameEventDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventDamage (remote,ctx , from, to, amount, option );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventDamage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventDamage;
        summary.rmiName = RmiName_OnGameEventDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventObject(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int health; Nettention.Proud.Marshaler.Read(__msg,out health);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventObject);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=num.ToString()+",";
parameterString+=health.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventObject, RmiName_OnGameEventObject,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventObject;
        summary.rmiName = RmiName_OnGameEventObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventObject (remote,ctx , num, health );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventObject);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventObject;
        summary.rmiName = RmiName_OnGameEventObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int type; Nettention.Proud.Marshaler.Read(__msg,out type);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int action; Nettention.Proud.Marshaler.Read(__msg,out action);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=type.ToString()+",";
parameterString+=num.ToString()+",";
parameterString+=action.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventItem, RmiName_OnGameEventItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventItem;
        summary.rmiName = RmiName_OnGameEventItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventItem (remote,ctx , type, num, action );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventItem;
        summary.rmiName = RmiName_OnGameEventItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventKill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int from; Nettention.Proud.Marshaler.Read(__msg,out from);	
int to; Nettention.Proud.Marshaler.Read(__msg,out to);	
String option; Nettention.Proud.Marshaler.Read(__msg,out option);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventKill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=from.ToString()+",";
parameterString+=to.ToString()+",";
parameterString+=option.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventKill, RmiName_OnGameEventKill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventKill;
        summary.rmiName = RmiName_OnGameEventKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventKill (remote,ctx , from, to, option );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventKill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventKill;
        summary.rmiName = RmiName_OnGameEventKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventRespawn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int time; Nettention.Proud.Marshaler.Read(__msg,out time);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventRespawn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=num.ToString()+",";
parameterString+=time.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventRespawn, RmiName_OnGameEventRespawn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventRespawn;
        summary.rmiName = RmiName_OnGameEventRespawn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventRespawn (remote,ctx , num, time );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventRespawn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventRespawn;
        summary.rmiName = RmiName_OnGameEventRespawn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameResult, RmiName_OnGameResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameResult;
        summary.rmiName = RmiName_OnGameResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameResult (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameResult;
        summary.rmiName = RmiName_OnGameResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserMove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserMove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserMove, RmiName_OnGameUserMove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserMove (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserMove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserSync(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserSync);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserSync, RmiName_OnGameUserSync,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserSync (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserSync);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginResult="OnLoginResult";
public const string RmiName_OnRegisterResult="OnRegisterResult";
public const string RmiName_OnStatusResult="OnStatusResult";
public const string RmiName_OnSoloMatched="OnSoloMatched";
public const string RmiName_OnTeamMatched="OnTeamMatched";
public const string RmiName_OnGameInfo="OnGameInfo";
public const string RmiName_OnGameStatusCountdown="OnGameStatusCountdown";
public const string RmiName_OnGameStatusTime="OnGameStatusTime";
public const string RmiName_OnGameStatusReady="OnGameStatusReady";
public const string RmiName_OnGameStatusScore="OnGameStatusScore";
public const string RmiName_OnGameStatusMessage="OnGameStatusMessage";
public const string RmiName_OnGameEventHealth="OnGameEventHealth";
public const string RmiName_OnGameEventDamage="OnGameEventDamage";
public const string RmiName_OnGameEventObject="OnGameEventObject";
public const string RmiName_OnGameEventItem="OnGameEventItem";
public const string RmiName_OnGameEventKill="OnGameEventKill";
public const string RmiName_OnGameEventRespawn="OnGameEventRespawn";
public const string RmiName_OnGameResult="OnGameResult";
public const string RmiName_OnGameUserMove="OnGameUserMove";
public const string RmiName_OnGameUserSync="OnGameUserSync";
       
public const string RmiName_First = RmiName_OnLoginResult;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginResult="";
public const string RmiName_OnRegisterResult="";
public const string RmiName_OnStatusResult="";
public const string RmiName_OnSoloMatched="";
public const string RmiName_OnTeamMatched="";
public const string RmiName_OnGameInfo="";
public const string RmiName_OnGameStatusCountdown="";
public const string RmiName_OnGameStatusTime="";
public const string RmiName_OnGameStatusReady="";
public const string RmiName_OnGameStatusScore="";
public const string RmiName_OnGameStatusMessage="";
public const string RmiName_OnGameEventHealth="";
public const string RmiName_OnGameEventDamage="";
public const string RmiName_OnGameEventObject="";
public const string RmiName_OnGameEventItem="";
public const string RmiName_OnGameEventKill="";
public const string RmiName_OnGameEventRespawn="";
public const string RmiName_OnGameResult="";
public const string RmiName_OnGameUserMove="";
public const string RmiName_OnGameUserSync="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

