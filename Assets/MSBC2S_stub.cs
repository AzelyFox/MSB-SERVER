




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace MSBC2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool OnLoginRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id, String pw);  
		public OnLoginRequestDelegate OnLoginRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id, String pw)
		{ 
			return false;
		};
		public delegate bool OnRegisterRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id, String pw, String nick);  
		public OnRegisterRequestDelegate OnRegisterRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id, String pw, String nick)
		{ 
			return false;
		};
		public delegate bool OnStatusRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id);  
		public OnStatusRequestDelegate OnStatusRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String id)
		{ 
			return false;
		};
		public delegate bool OnSoloQueueRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int weapon, int skin);  
		public OnSoloQueueRequestDelegate OnSoloQueueRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int weapon, int skin)
		{ 
			return false;
		};
		public delegate bool OnTeamQueueRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int weapon, int skin);  
		public OnTeamQueueRequestDelegate OnTeamQueueRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int weapon, int skin)
		{ 
			return false;
		};
		public delegate bool OnQuitQueueRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public OnQuitQueueRequestDelegate OnQuitQueueRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool OnGameInfoRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room);  
		public OnGameInfoRequestDelegate OnGameInfoRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room)
		{ 
			return false;
		};
		public delegate bool OnGameActionReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room);  
		public OnGameActionReadyDelegate OnGameActionReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room)
		{ 
			return false;
		};
		public delegate bool OnGameActionDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int num, int amount, String option);  
		public OnGameActionDamageDelegate OnGameActionDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int num, int amount, String option)
		{ 
			return false;
		};
		public delegate bool OnGameActionObjectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int num, int amount);  
		public OnGameActionObjectDelegate OnGameActionObject = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int num, int amount)
		{ 
			return false;
		};
		public delegate bool OnGameActionItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int type, int num);  
		public OnGameActionItemDelegate OnGameActionItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, int type, int num)
		{ 
			return false;
		};
		public delegate bool OnGameUserMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, String data);  
		public OnGameUserMoveDelegate OnGameUserMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, String data)
		{ 
			return false;
		};
		public delegate bool OnGameUserSyncDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, String data);  
		public OnGameUserSyncDelegate OnGameUserSync = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int room, String data)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.OnLoginRequest:
            ProcessReceivedMessage_OnLoginRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnRegisterRequest:
            ProcessReceivedMessage_OnRegisterRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnStatusRequest:
            ProcessReceivedMessage_OnStatusRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnSoloQueueRequest:
            ProcessReceivedMessage_OnSoloQueueRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnTeamQueueRequest:
            ProcessReceivedMessage_OnTeamQueueRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnQuitQueueRequest:
            ProcessReceivedMessage_OnQuitQueueRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameInfoRequest:
            ProcessReceivedMessage_OnGameInfoRequest(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameActionReady:
            ProcessReceivedMessage_OnGameActionReady(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameActionDamage:
            ProcessReceivedMessage_OnGameActionDamage(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameActionObject:
            ProcessReceivedMessage_OnGameActionObject(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameActionItem:
            ProcessReceivedMessage_OnGameActionItem(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserMove:
            ProcessReceivedMessage_OnGameUserMove(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserSync:
            ProcessReceivedMessage_OnGameUserSync(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_OnLoginRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
String pw; Nettention.Proud.Marshaler.Read(__msg,out pw);	
core.PostCheckReadMessage(__msg, RmiName_OnLoginRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=pw.ToString()+",";
        NotifyCallFromStub(Common.OnLoginRequest, RmiName_OnLoginRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnLoginRequest;
        summary.rmiName = RmiName_OnLoginRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnLoginRequest (remote,ctx , id, pw );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnLoginRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnLoginRequest;
        summary.rmiName = RmiName_OnLoginRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnRegisterRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
String pw; Nettention.Proud.Marshaler.Read(__msg,out pw);	
String nick; Nettention.Proud.Marshaler.Read(__msg,out nick);	
core.PostCheckReadMessage(__msg, RmiName_OnRegisterRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=pw.ToString()+",";
parameterString+=nick.ToString()+",";
        NotifyCallFromStub(Common.OnRegisterRequest, RmiName_OnRegisterRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnRegisterRequest;
        summary.rmiName = RmiName_OnRegisterRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnRegisterRequest (remote,ctx , id, pw, nick );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnRegisterRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnRegisterRequest;
        summary.rmiName = RmiName_OnRegisterRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnStatusRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_OnStatusRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.OnStatusRequest, RmiName_OnStatusRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnStatusRequest;
        summary.rmiName = RmiName_OnStatusRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnStatusRequest (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnStatusRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnStatusRequest;
        summary.rmiName = RmiName_OnStatusRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnSoloQueueRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int weapon; Nettention.Proud.Marshaler.Read(__msg,out weapon);	
int skin; Nettention.Proud.Marshaler.Read(__msg,out skin);	
core.PostCheckReadMessage(__msg, RmiName_OnSoloQueueRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=weapon.ToString()+",";
parameterString+=skin.ToString()+",";
        NotifyCallFromStub(Common.OnSoloQueueRequest, RmiName_OnSoloQueueRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnSoloQueueRequest;
        summary.rmiName = RmiName_OnSoloQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnSoloQueueRequest (remote,ctx , weapon, skin );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnSoloQueueRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnSoloQueueRequest;
        summary.rmiName = RmiName_OnSoloQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTeamQueueRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int weapon; Nettention.Proud.Marshaler.Read(__msg,out weapon);	
int skin; Nettention.Proud.Marshaler.Read(__msg,out skin);	
core.PostCheckReadMessage(__msg, RmiName_OnTeamQueueRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=weapon.ToString()+",";
parameterString+=skin.ToString()+",";
        NotifyCallFromStub(Common.OnTeamQueueRequest, RmiName_OnTeamQueueRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTeamQueueRequest;
        summary.rmiName = RmiName_OnTeamQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTeamQueueRequest (remote,ctx , weapon, skin );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTeamQueueRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTeamQueueRequest;
        summary.rmiName = RmiName_OnTeamQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnQuitQueueRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_OnQuitQueueRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.OnQuitQueueRequest, RmiName_OnQuitQueueRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnQuitQueueRequest;
        summary.rmiName = RmiName_OnQuitQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnQuitQueueRequest (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnQuitQueueRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnQuitQueueRequest;
        summary.rmiName = RmiName_OnQuitQueueRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameInfoRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
core.PostCheckReadMessage(__msg, RmiName_OnGameInfoRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
        NotifyCallFromStub(Common.OnGameInfoRequest, RmiName_OnGameInfoRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameInfoRequest;
        summary.rmiName = RmiName_OnGameInfoRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameInfoRequest (remote,ctx , room );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameInfoRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameInfoRequest;
        summary.rmiName = RmiName_OnGameInfoRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameActionReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
core.PostCheckReadMessage(__msg, RmiName_OnGameActionReady);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
        NotifyCallFromStub(Common.OnGameActionReady, RmiName_OnGameActionReady,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameActionReady;
        summary.rmiName = RmiName_OnGameActionReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameActionReady (remote,ctx , room );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameActionReady);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameActionReady;
        summary.rmiName = RmiName_OnGameActionReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameActionDamage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int amount; Nettention.Proud.Marshaler.Read(__msg,out amount);	
String option; Nettention.Proud.Marshaler.Read(__msg,out option);	
core.PostCheckReadMessage(__msg, RmiName_OnGameActionDamage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
parameterString+=num.ToString()+",";
parameterString+=amount.ToString()+",";
parameterString+=option.ToString()+",";
        NotifyCallFromStub(Common.OnGameActionDamage, RmiName_OnGameActionDamage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameActionDamage;
        summary.rmiName = RmiName_OnGameActionDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameActionDamage (remote,ctx , room, num, amount, option );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameActionDamage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameActionDamage;
        summary.rmiName = RmiName_OnGameActionDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameActionObject(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
int amount; Nettention.Proud.Marshaler.Read(__msg,out amount);	
core.PostCheckReadMessage(__msg, RmiName_OnGameActionObject);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
parameterString+=num.ToString()+",";
parameterString+=amount.ToString()+",";
        NotifyCallFromStub(Common.OnGameActionObject, RmiName_OnGameActionObject,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameActionObject;
        summary.rmiName = RmiName_OnGameActionObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameActionObject (remote,ctx , room, num, amount );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameActionObject);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameActionObject;
        summary.rmiName = RmiName_OnGameActionObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameActionItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
int type; Nettention.Proud.Marshaler.Read(__msg,out type);	
int num; Nettention.Proud.Marshaler.Read(__msg,out num);	
core.PostCheckReadMessage(__msg, RmiName_OnGameActionItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
parameterString+=type.ToString()+",";
parameterString+=num.ToString()+",";
        NotifyCallFromStub(Common.OnGameActionItem, RmiName_OnGameActionItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameActionItem;
        summary.rmiName = RmiName_OnGameActionItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameActionItem (remote,ctx , room, type, num );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameActionItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameActionItem;
        summary.rmiName = RmiName_OnGameActionItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserMove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserMove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserMove, RmiName_OnGameUserMove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserMove (remote,ctx , room, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserMove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserSync(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int room; Nettention.Proud.Marshaler.Read(__msg,out room);	
String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserSync);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserSync, RmiName_OnGameUserSync,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserSync (remote,ctx , room, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserSync);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginRequest="OnLoginRequest";
public const string RmiName_OnRegisterRequest="OnRegisterRequest";
public const string RmiName_OnStatusRequest="OnStatusRequest";
public const string RmiName_OnSoloQueueRequest="OnSoloQueueRequest";
public const string RmiName_OnTeamQueueRequest="OnTeamQueueRequest";
public const string RmiName_OnQuitQueueRequest="OnQuitQueueRequest";
public const string RmiName_OnGameInfoRequest="OnGameInfoRequest";
public const string RmiName_OnGameActionReady="OnGameActionReady";
public const string RmiName_OnGameActionDamage="OnGameActionDamage";
public const string RmiName_OnGameActionObject="OnGameActionObject";
public const string RmiName_OnGameActionItem="OnGameActionItem";
public const string RmiName_OnGameUserMove="OnGameUserMove";
public const string RmiName_OnGameUserSync="OnGameUserSync";
       
public const string RmiName_First = RmiName_OnLoginRequest;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginRequest="";
public const string RmiName_OnRegisterRequest="";
public const string RmiName_OnStatusRequest="";
public const string RmiName_OnSoloQueueRequest="";
public const string RmiName_OnTeamQueueRequest="";
public const string RmiName_OnQuitQueueRequest="";
public const string RmiName_OnGameInfoRequest="";
public const string RmiName_OnGameActionReady="";
public const string RmiName_OnGameActionDamage="";
public const string RmiName_OnGameActionObject="";
public const string RmiName_OnGameActionItem="";
public const string RmiName_OnGameUserMove="";
public const string RmiName_OnGameUserSync="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

