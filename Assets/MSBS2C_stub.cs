




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;

namespace MSBS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool OnLoginResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnLoginResultDelegate OnLoginResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnStatusResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnStatusResultDelegate OnStatusResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnSystemResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnSystemResultDelegate OnSystemResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameMatchedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameMatchedDelegate OnGameMatched = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameInfoDelegate OnGameInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusCountdownDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusCountdownDelegate OnGameStatusCountdown = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusTimeDelegate OnGameStatusTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusReadyDelegate OnGameStatusReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusScoreDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusScoreDelegate OnGameStatusScore = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameStatusMessageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameStatusMessageDelegate OnGameStatusMessage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventHealthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventHealthDelegate OnGameEventHealth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventDamageDelegate OnGameEventDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventObjectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventObjectDelegate OnGameEventObject = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventItemDelegate OnGameEventItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventKillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventKillDelegate OnGameEventKill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameEventRespawnDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameEventRespawnDelegate OnGameEventRespawn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameResultDelegate OnGameResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameUserMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameUserMoveDelegate OnGameUserMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
		public delegate bool OnGameUserSyncDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data);  
		public OnGameUserSyncDelegate OnGameUserSync = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String data)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.OnLoginResult:
            ProcessReceivedMessage_OnLoginResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnStatusResult:
            ProcessReceivedMessage_OnStatusResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnSystemResult:
            ProcessReceivedMessage_OnSystemResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameMatched:
            ProcessReceivedMessage_OnGameMatched(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameInfo:
            ProcessReceivedMessage_OnGameInfo(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusCountdown:
            ProcessReceivedMessage_OnGameStatusCountdown(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusTime:
            ProcessReceivedMessage_OnGameStatusTime(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusReady:
            ProcessReceivedMessage_OnGameStatusReady(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusScore:
            ProcessReceivedMessage_OnGameStatusScore(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameStatusMessage:
            ProcessReceivedMessage_OnGameStatusMessage(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventHealth:
            ProcessReceivedMessage_OnGameEventHealth(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventDamage:
            ProcessReceivedMessage_OnGameEventDamage(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventObject:
            ProcessReceivedMessage_OnGameEventObject(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventItem:
            ProcessReceivedMessage_OnGameEventItem(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventKill:
            ProcessReceivedMessage_OnGameEventKill(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameEventRespawn:
            ProcessReceivedMessage_OnGameEventRespawn(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameResult:
            ProcessReceivedMessage_OnGameResult(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserMove:
            ProcessReceivedMessage_OnGameUserMove(__msg, pa, hostTag, remote);
            break;
        case Common.OnGameUserSync:
            ProcessReceivedMessage_OnGameUserSync(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_OnLoginResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnLoginResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnLoginResult, RmiName_OnLoginResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnLoginResult;
        summary.rmiName = RmiName_OnLoginResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnLoginResult (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnLoginResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnLoginResult;
        summary.rmiName = RmiName_OnLoginResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnStatusResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnStatusResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnStatusResult, RmiName_OnStatusResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnStatusResult;
        summary.rmiName = RmiName_OnStatusResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnStatusResult (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnStatusResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnStatusResult;
        summary.rmiName = RmiName_OnStatusResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnSystemResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnSystemResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnSystemResult, RmiName_OnSystemResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnSystemResult;
        summary.rmiName = RmiName_OnSystemResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnSystemResult (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnSystemResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnSystemResult;
        summary.rmiName = RmiName_OnSystemResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameMatched(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameMatched);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameMatched, RmiName_OnGameMatched,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameMatched;
        summary.rmiName = RmiName_OnGameMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameMatched (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameMatched);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameMatched;
        summary.rmiName = RmiName_OnGameMatched;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameInfo, RmiName_OnGameInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameInfo;
        summary.rmiName = RmiName_OnGameInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameInfo (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameInfo;
        summary.rmiName = RmiName_OnGameInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusCountdown(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusCountdown);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusCountdown, RmiName_OnGameStatusCountdown,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusCountdown;
        summary.rmiName = RmiName_OnGameStatusCountdown;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusCountdown (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusCountdown);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusCountdown;
        summary.rmiName = RmiName_OnGameStatusCountdown;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusTime(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusTime);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusTime, RmiName_OnGameStatusTime,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusTime;
        summary.rmiName = RmiName_OnGameStatusTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusTime (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusTime);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusTime;
        summary.rmiName = RmiName_OnGameStatusTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusReady);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusReady, RmiName_OnGameStatusReady,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusReady;
        summary.rmiName = RmiName_OnGameStatusReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusReady (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusReady);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusReady;
        summary.rmiName = RmiName_OnGameStatusReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusScore(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusScore);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusScore, RmiName_OnGameStatusScore,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusScore;
        summary.rmiName = RmiName_OnGameStatusScore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusScore (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusScore);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusScore;
        summary.rmiName = RmiName_OnGameStatusScore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameStatusMessage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameStatusMessage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameStatusMessage, RmiName_OnGameStatusMessage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameStatusMessage;
        summary.rmiName = RmiName_OnGameStatusMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameStatusMessage (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameStatusMessage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameStatusMessage;
        summary.rmiName = RmiName_OnGameStatusMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventHealth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventHealth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventHealth, RmiName_OnGameEventHealth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventHealth;
        summary.rmiName = RmiName_OnGameEventHealth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventHealth (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventHealth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventHealth;
        summary.rmiName = RmiName_OnGameEventHealth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventDamage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventDamage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventDamage, RmiName_OnGameEventDamage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventDamage;
        summary.rmiName = RmiName_OnGameEventDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventDamage (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventDamage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventDamage;
        summary.rmiName = RmiName_OnGameEventDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventObject(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventObject);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventObject, RmiName_OnGameEventObject,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventObject;
        summary.rmiName = RmiName_OnGameEventObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventObject (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventObject);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventObject;
        summary.rmiName = RmiName_OnGameEventObject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventItem, RmiName_OnGameEventItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventItem;
        summary.rmiName = RmiName_OnGameEventItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventItem (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventItem;
        summary.rmiName = RmiName_OnGameEventItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventKill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventKill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventKill, RmiName_OnGameEventKill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventKill;
        summary.rmiName = RmiName_OnGameEventKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventKill (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventKill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventKill;
        summary.rmiName = RmiName_OnGameEventKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameEventRespawn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameEventRespawn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameEventRespawn, RmiName_OnGameEventRespawn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameEventRespawn;
        summary.rmiName = RmiName_OnGameEventRespawn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameEventRespawn (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameEventRespawn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameEventRespawn;
        summary.rmiName = RmiName_OnGameEventRespawn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameResult);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameResult, RmiName_OnGameResult,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameResult;
        summary.rmiName = RmiName_OnGameResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameResult (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameResult);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameResult;
        summary.rmiName = RmiName_OnGameResult;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserMove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserMove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserMove, RmiName_OnGameUserMove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserMove (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserMove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserMove;
        summary.rmiName = RmiName_OnGameUserMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnGameUserSync(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        String data; Nettention.Proud.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_OnGameUserSync);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.OnGameUserSync, RmiName_OnGameUserSync,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnGameUserSync (remote,ctx , data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnGameUserSync);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnGameUserSync;
        summary.rmiName = RmiName_OnGameUserSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginResult="OnLoginResult";
public const string RmiName_OnStatusResult="OnStatusResult";
public const string RmiName_OnSystemResult="OnSystemResult";
public const string RmiName_OnGameMatched="OnGameMatched";
public const string RmiName_OnGameInfo="OnGameInfo";
public const string RmiName_OnGameStatusCountdown="OnGameStatusCountdown";
public const string RmiName_OnGameStatusTime="OnGameStatusTime";
public const string RmiName_OnGameStatusReady="OnGameStatusReady";
public const string RmiName_OnGameStatusScore="OnGameStatusScore";
public const string RmiName_OnGameStatusMessage="OnGameStatusMessage";
public const string RmiName_OnGameEventHealth="OnGameEventHealth";
public const string RmiName_OnGameEventDamage="OnGameEventDamage";
public const string RmiName_OnGameEventObject="OnGameEventObject";
public const string RmiName_OnGameEventItem="OnGameEventItem";
public const string RmiName_OnGameEventKill="OnGameEventKill";
public const string RmiName_OnGameEventRespawn="OnGameEventRespawn";
public const string RmiName_OnGameResult="OnGameResult";
public const string RmiName_OnGameUserMove="OnGameUserMove";
public const string RmiName_OnGameUserSync="OnGameUserSync";
       
public const string RmiName_First = RmiName_OnLoginResult;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_OnLoginResult="";
public const string RmiName_OnStatusResult="";
public const string RmiName_OnSystemResult="";
public const string RmiName_OnGameMatched="";
public const string RmiName_OnGameInfo="";
public const string RmiName_OnGameStatusCountdown="";
public const string RmiName_OnGameStatusTime="";
public const string RmiName_OnGameStatusReady="";
public const string RmiName_OnGameStatusScore="";
public const string RmiName_OnGameStatusMessage="";
public const string RmiName_OnGameEventHealth="";
public const string RmiName_OnGameEventDamage="";
public const string RmiName_OnGameEventObject="";
public const string RmiName_OnGameEventItem="";
public const string RmiName_OnGameEventKill="";
public const string RmiName_OnGameEventRespawn="";
public const string RmiName_OnGameResult="";
public const string RmiName_OnGameUserMove="";
public const string RmiName_OnGameUserSync="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

